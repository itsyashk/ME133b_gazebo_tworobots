# Project Context: Two-Robot Mars Simulation with Teleop & SLAM in ROS2 Humble (WSL2)

## Overview
This project creates a simulation environment that mimics a Mars-like landscape using Gazebo, where two differential-drive robots are deployed and manually controlled. Each robot is equipped with sensors (such as LiDAR) to perform Simultaneous Localization and Mapping (SLAM) in real time. The robots are controlled via separate keyboard inputs—one using arrow keys and the other using WASD—to facilitate simultaneous operation. The entire system is developed on Ubuntu 22.04 under WSL2 using ROS2 Humble, with RViz2 used for visualization.

## Objectives
1. **Simulated Mars Environment:**
   - Develop a Gazebo world that reflects the basic terrain and visual characteristics of Mars, keeping the world simple for performance and debugging.
   
2. **Dual-Robot Deployment:**
   - Spawn two robots in the same simulated world, each in its own namespace (e.g., `/robot1` and `/robot2`) to ensure separation of topics, TF trees, and sensor data.
   
3. **Manual Teleoperation:**
   - Implement teleoperation using keyboard inputs. 
   - Assign arrow keys to control one robot and WASD keys for the other, ensuring that command remapping directs inputs to the correct robot.
   
4. **SLAM Integration:**
   - Use SLAM Toolbox to enable each robot to build its own map based on its sensor data.
   - Operate independent SLAM instances to simplify the integration and minimize potential bugs.
   
5. **Visualization:**
   - Use RViz2 to display each robot’s map, sensor data (e.g., LaserScan), and TF frames.
   - Set up multiple displays to observe the robots’ behaviors and the evolving environment maps concurrently.

## Technical Details
- **ROS2 Humble on WSL2:**
  - The project leverages ROS2 Humble installed on Ubuntu 22.04 (Jammy) running under WSL2, utilizing WSLg for GUI support.
  - ROS2 provides robust tools for multi-robot management, sensor data processing, and node communication.
  
- **Gazebo Simulation:**
  - Gazebo simulates a Mars-like world with minimal features to keep the simulation lightweight.
  - The world is defined in a custom world file (e.g., `mars.world`), which may include simple terrain textures or objects to simulate a Martian landscape.
  
- **Robot Modeling:**
  - A basic differential-drive robot is modeled using URDF/Xacro, including key sensors like LiDAR.
  - Each robot is instantiated with a unique namespace to manage separate command velocities, sensor topics, and TF trees.
  
- **Teleoperation:**
  - The `teleop_twist_keyboard` package is used to control each robot manually.
  - Teleop nodes are remapped so that one instance sends commands to `/robot1/cmd_vel` (arrow keys) and another to `/robot2/cmd_vel` (WASD), ensuring isolated control channels.
  
- **SLAM Implementation:**
  - SLAM Toolbox is utilized for real-time mapping; each robot processes its own sensor data to construct a map of its surroundings.
  - Running separate SLAM instances avoids the complexities of immediate map merging, ensuring a more straightforward integration.
  
- **Visualization in RViz2:**
  - RViz2 is configured to display multiple topics simultaneously, allowing the monitoring of both robots’ maps, sensor data, and TF frames.
  - This provides a comprehensive view of the system's performance and aids in debugging and future enhancements.

## Challenges and Considerations
- **Simultaneous Control:**
  - Handling two teleop nodes concurrently requires careful topic remapping and possibly custom key configurations to avoid conflicts.
  
- **Resource Management:**
  - Running multiple SLAM processes, Gazebo, and RViz2 can be resource-intensive in a WSL2 environment. Optimizing performance and resource allocation is critical.
  
- **SLAM Accuracy and Future Map Merging:**
  - While individual SLAM instances simplify the initial setup, merging these maps into a cohesive global map remains a potential future improvement.
  - Maintaining accurate localization and sensor data synchronization between the robots is essential for reliable SLAM performance.

## Future Directions
- **Map Merging:**
  - Explore techniques for merging the individual maps from each robot into a unified global map, enhancing overall situational awareness.
  
- **Autonomous Capabilities:**
  - Incorporate autonomous navigation or obstacle avoidance algorithms to complement manual teleoperation.
  
- **Enhanced Environmental Complexity:**
  - Gradually introduce more complex terrain features and obstacles in the Gazebo world to challenge the SLAM and control systems further.

## Conclusion
This project lays the groundwork for a multi-robot Mars exploration simulation by combining manual teleoperation and independent SLAM processes in a simplified environment. The design focuses on ease of integration and minimizing potential bugs by isolating control and mapping for each robot. This modular approach not only facilitates initial development and debugging but also sets a clear path for future expansions such as map merging and autonomous navigation. By leveraging ROS2, Gazebo, and RViz2, the project demonstrates an effective and scalable method for simulating multi-robot operations in challenging terrains.
